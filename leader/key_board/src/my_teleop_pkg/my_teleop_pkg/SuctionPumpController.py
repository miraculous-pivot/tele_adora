#!/usr/bin/python3
# -*- coding:utf-8 -*-
# @author  : cc
# @time    : 2025-07-29 14:38
# @function: Modbus 继电器开关示例
# @version : V1

import serial
import time
 

class SuctionPumpController:
    def __init__(self, port="/dev/ttyACM1", baudrate=9600):
        self.ser = None
        self.device_id = 0x01  # 默认设备地址
        self.init_serial(port, baudrate)

    def init_serial(self, port, baudrate):
        try:
            self.ser = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                timeout=0.1
            )
            print(f"串口打开成功：{port}，波特率：{baudrate}")
        except Exception as e:
            print("串口初始化失败：", e)

    def set_baudrate_mode(self, baudrate):
        """
        设置波特率模式，0-5对应不同的速率
        """
        baudrate_cmds = {
            1200: bytes.fromhex("01B0000000004010"),
            2400: bytes.fromhex("01B0000001004180"),
            4800: bytes.fromhex("01B0000002004170"),
            9600: bytes.fromhex("01B00000030040E0"),
            19200: bytes.fromhex("01B00000040042D0"),
            115200: bytes.fromhex("01B0000005004340")
        }
        cmd = baudrate_cmds.get(baudrate)
        if not cmd:
            print("不支持该波特率")
            return
        self.send_command(cmd)
        self.ser.close()
        self.ser.baudrate = baudrate
        self.ser.open()
        if self.send_command(cmd):
            print(f"波特率切换至{baudrate}")

    def calculate_crc16(self, data: bytes) -> bytes:
        auchCRCHi = [  # CRC 高位字节值表 */
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
            0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
        ]
        #  CRC 低位字节值表*/
        auchCRCLo = [
            0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05,
            0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA,
            0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA,
            0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15,
            0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10, 0xF0,
            0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35,
            0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B,
            0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA,
            0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27,
            0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
            0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64,
            0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
            0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE,
            0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7,
            0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
            0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
            0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99,
            0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E,
            0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46,
            0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
        ]

        crc_hi = 0xFF  # 高字节初始化
        crc_lo = 0xFF  # 低字节初始化

        for byte in data:
            # 计算索引（修正原代码中的 *puchMsgg++ 错误）
            uIndex = crc_hi ^ byte
            # 更新CRC值
            temp = crc_hi
            crc_hi = crc_lo ^ auchCRCHi[uIndex]
            crc_lo = auchCRCLo[uIndex]

        # 返回组合后的CRC值
        return bytes([crc_hi, crc_lo])

    def build_coil_command(self, channel: int, turn_on: bool) -> bytes:
        """
        构造标准 Modbus RTU 写单个线圈命令（功能码 0x05）
        channel: 通道号，0~N
        turn_on: True 开启，False 关闭
        """
        coil_addr = channel  # 线圈地址等于通道号
        function_code = 0x05
        data = bytearray()
        data.append(self.device_id)
        data.append(function_code)
        data += coil_addr.to_bytes(2, byteorder='big')
        if turn_on:
            # data += b'\xFF\x00'
            data.append(0xFF)
            data.append(0x00)
        else:
            # data += b'\x00\x00'
            data.append(0x00)
            data.append(0x00)
        crc = self.calculate_crc16(data)
        data += crc
        return data

    def open_channel(self, ch: int):
        cmd = self.build_coil_command(ch, True)
        self.send_command(cmd)

    def close_channel(self, ch: int):
        cmd = self.build_coil_command(ch, False)
        self.send_command(cmd)

    def send_command(self, cmd: bytes) -> bool:
        if not self.ser or not self.ser.is_open:
            print("串口未打开，无法发送")
            return False

        self.ser.write(cmd)
        print(f"发送：{cmd.hex().upper()}")
        time.sleep(0.05)
        resp = self.ser.read_all()

        if resp[:len(cmd)] == cmd:
            print("命令执行成功，应答匹配")
            return True
        else:
            print(f"应答异常，返回数据：{resp.hex().upper()}")
            return False

    def close(self):
        if self.ser and self.ser.is_open:
            self.ser.close()
            print("串口已关闭")


if __name__ == "__main__":
    controller = SuctionPumpController(port="/dev/ttyACM1", baudrate=9600)
    # 用法1 修改波特率
    #controller.set_baudrate_mode(115200)
    while True:
        # 用法2 开指定通道
        controller.open_channel(0)
        time.sleep(2)
        # 用法关指定通道
        controller.close_channel(0)
        time.sleep(2)
        # controller.open_channel(1)
        # time.sleep(2)
        # controller.close_channel(1)
        # time.sleep(2)

    controller.close()
